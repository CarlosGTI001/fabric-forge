From 01f6391697398d56b395e1624efea591955d32b6 Mon Sep 17 00:00:00 2001
From: Jamie Mansfield <jmansfield@cadixdev.org>
Date: Wed, 17 Jun 2020 13:49:11 +0100
Subject: [PATCH] Port fabric-command-api-v1


diff --git a/fabric-command-api-v1/build.gradle b/fabric-command-api-v1/build.gradle
index 476565e..8715ca5 100644
--- a/fabric-command-api-v1/build.gradle
+++ b/fabric-command-api-v1/build.gradle
@@ -2,7 +2,5 @@ archivesBaseName = "fabric-command-api-v1"
 version = getSubprojectVersion(project, "1.0.2")
 
 dependencies {
-	compile project(path: ':fabric-api-base', configuration: 'dev')
-
-	testmodCompile project(path: ':fabric-events-lifecycle-v0', configuration: 'dev')
+	compile project(':fabric:fabric-api-base')
 }
diff --git a/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/api/command/v1/CommandRegistrationCallback.java b/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/api/command/v1/CommandRegistrationCallback.java
index 6cc3ea2..c953d05 100644
--- a/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/api/command/v1/CommandRegistrationCallback.java
+++ b/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/api/command/v1/CommandRegistrationCallback.java
@@ -18,10 +18,9 @@ package net.fabricmc.fabric.api.command.v1;
 
 import com.mojang.brigadier.CommandDispatcher;
 
-import net.minecraft.server.command.ServerCommandSource;
-
 import net.fabricmc.fabric.api.event.Event;
 import net.fabricmc.fabric.api.event.EventFactory;
+import net.minecraft.command.CommandSource;
 
 /**
  * Callback for when a server registers all commands.
@@ -48,5 +47,5 @@ public interface CommandRegistrationCallback {
 	 * @param dispatcher the command dispatcher to register commands to.
 	 * @param dedicated whether the server this command is being registered on is a dedicated server.
 	 */
-	void register(CommandDispatcher<ServerCommandSource> dispatcher, boolean dedicated);
+	void register(CommandDispatcher<CommandSource> dispatcher, boolean dedicated);
 }
diff --git a/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/v1/CommandsMod.java b/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/v1/CommandsMod.java
new file mode 100644
index 0000000..f1c24af
--- /dev/null
+++ b/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/impl/command/v1/CommandsMod.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package net.fabricmc.fabric.impl.command.v1;
+
+import net.fabricmc.api.ModInitializer;
+import net.fabricmc.fabric.api.command.v1.CommandRegistrationCallback;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.eventbus.api.SubscribeEvent;
+import net.minecraftforge.fml.event.server.FMLServerStartingEvent;
+
+public class CommandsMod implements ModInitializer {
+
+	@Override
+	public void onInitialize() {
+		MinecraftForge.EVENT_BUS.register(this);
+	}
+
+	@SubscribeEvent
+	public void onServerStart(final FMLServerStartingEvent event) {
+		CommandRegistrationCallback.EVENT.invoker().register(
+				event.getCommandDispatcher(),
+				event.getServer().isDedicatedServer()
+		);
+	}
+
+}
diff --git a/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/mixin/command/MixinCommandManager.java b/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/mixin/command/MixinCommandManager.java
deleted file mode 100644
index 737f2f6..0000000
--- a/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/mixin/command/MixinCommandManager.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.mixin.command;
-
-import com.mojang.brigadier.AmbiguityConsumer;
-import com.mojang.brigadier.CommandDispatcher;
-import org.spongepowered.asm.mixin.Mixin;
-import org.spongepowered.asm.mixin.injection.At;
-import org.spongepowered.asm.mixin.injection.Redirect;
-
-import net.minecraft.server.command.CommandManager;
-import net.minecraft.server.command.ServerCommandSource;
-
-import net.fabricmc.fabric.api.command.v1.CommandRegistrationCallback;
-
-@Mixin(CommandManager.class)
-public abstract class MixinCommandManager {
-	/**
-	 * @reason Add commands before ambiguities are calculated.
-	 */
-	@Redirect(at = @At(value = "INVOKE", target = "Lcom/mojang/brigadier/CommandDispatcher;findAmbiguities(Lcom/mojang/brigadier/AmbiguityConsumer;)V"), method = "<init>")
-	private void fabric_addCommands(CommandDispatcher<ServerCommandSource> dispatcher, AmbiguityConsumer<ServerCommandSource> ambiguityConsumer, boolean isDedicated) {
-		if (!isDedicated) {
-			CommandRegistrationCallback.EVENT.invoker().register(dispatcher, isDedicated);
-		}
-
-		// Now mimic vanilla logic by calling findAmbiguities.
-		dispatcher.findAmbiguities(ambiguityConsumer);
-	}
-}
diff --git a/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/mixin/command/MixinMinecraftDedicatedServer.java b/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/mixin/command/MixinMinecraftDedicatedServer.java
deleted file mode 100644
index 4019dea..0000000
--- a/fabric-command-api-v1/src/main/java/net/fabricmc/fabric/mixin/command/MixinMinecraftDedicatedServer.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.mixin.command;
-
-import java.io.File;
-import java.net.Proxy;
-
-import com.mojang.authlib.GameProfileRepository;
-import com.mojang.authlib.minecraft.MinecraftSessionService;
-import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
-import com.mojang.datafixers.DataFixer;
-import org.spongepowered.asm.mixin.Mixin;
-import org.spongepowered.asm.mixin.injection.At;
-import org.spongepowered.asm.mixin.injection.Inject;
-import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
-
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.WorldGenerationProgressListenerFactory;
-import net.minecraft.server.command.CommandManager;
-import net.minecraft.server.dedicated.MinecraftDedicatedServer;
-import net.minecraft.util.UserCache;
-
-import net.fabricmc.fabric.api.command.v1.CommandRegistrationCallback;
-
-@Mixin(MinecraftDedicatedServer.class)
-public abstract class MixinMinecraftDedicatedServer extends MinecraftServer {
-	public MixinMinecraftDedicatedServer(File gameDir, Proxy proxy, DataFixer dataFixer, CommandManager commandManager, YggdrasilAuthenticationService authService, MinecraftSessionService sessionService, GameProfileRepository gameProfileRepository, UserCache userCache, WorldGenerationProgressListenerFactory worldGenerationProgressListenerFactory, String levelName) {
-		super(gameDir, proxy, dataFixer, commandManager, authService, sessionService, gameProfileRepository, userCache, worldGenerationProgressListenerFactory, levelName);
-	}
-
-	@Inject(method = "setupServer", at = @At("HEAD"))
-	private void setupServer(CallbackInfoReturnable<Boolean> info) {
-		CommandRegistrationCallback.EVENT.invoker().register(getCommandManager().getDispatcher(), true);
-
-		//Possibly call findAmbiguities here
-	}
-}
diff --git a/fabric-command-api-v1/src/main/resources/fabric-command-api-v1.mixins.json b/fabric-command-api-v1/src/main/resources/fabric-command-api-v1.mixins.json
deleted file mode 100644
index 280db67..0000000
--- a/fabric-command-api-v1/src/main/resources/fabric-command-api-v1.mixins.json
+++ /dev/null
@@ -1,14 +0,0 @@
-{
-  "required": true,
-  "package": "net.fabricmc.fabric.mixin.command",
-  "compatibilityLevel": "JAVA_8",
-  "mixins": [
-    "MixinCommandManager",
-    "MixinMinecraftDedicatedServer"
-  ],
-  "client": [
-  ],
-  "injectors": {
-    "defaultRequire": 1
-  }
-}
diff --git a/fabric-command-api-v1/src/main/resources/fabric.mod.json b/fabric-command-api-v1/src/main/resources/fabric.mod.json
index b8fcd9e..ea8a9ea 100644
--- a/fabric-command-api-v1/src/main/resources/fabric.mod.json
+++ b/fabric-command-api-v1/src/main/resources/fabric.mod.json
@@ -21,6 +21,10 @@
   },
   "description": "Adds command-related hooks.",
   "mixins": [
-    "fabric-command-api-v1.mixins.json"
-  ]
+  ],
+  "entrypoints": {
+    "main": [
+      "net.fabricmc.fabric.impl.command.v1.CommandsMod"
+    ]
+  }
 }
diff --git a/fabric-command-api-v1/src/testmod/java/net/fabricmc/fabric/test/command/CommandTest.java b/fabric-command-api-v1/src/testmod/java/net/fabricmc/fabric/test/command/CommandTest.java
deleted file mode 100644
index a815a3a..0000000
--- a/fabric-command-api-v1/src/testmod/java/net/fabricmc/fabric/test/command/CommandTest.java
+++ /dev/null
@@ -1,152 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.test.command;
-
-import static net.minecraft.server.command.CommandManager.literal;
-
-import com.mojang.brigadier.context.CommandContext;
-import com.mojang.brigadier.exceptions.CommandSyntaxException;
-import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
-import com.mojang.brigadier.tree.CommandNode;
-import com.mojang.brigadier.tree.RootCommandNode;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-import net.minecraft.server.command.ServerCommandSource;
-import net.minecraft.text.LiteralText;
-
-import net.fabricmc.api.ModInitializer;
-import net.fabricmc.fabric.api.command.v1.CommandRegistrationCallback;
-import net.fabricmc.fabric.api.event.server.ServerTickCallback;
-import net.fabricmc.fabric.api.event.server.ServerStopCallback;
-
-public class CommandTest implements ModInitializer {
-	private static final Logger LOGGER = LogManager.getLogger(CommandTest.class);
-	private static final SimpleCommandExceptionType WRONG_SIDE_SHOULD_BE_INTEGRATED = new SimpleCommandExceptionType(new LiteralText("This command was registered incorrectly. Should only be present on an integrated server but was ran on a dedicated server!"));
-	private static final SimpleCommandExceptionType WRONG_SIDE_SHOULD_BE_DEDICATED = new SimpleCommandExceptionType(new LiteralText("This command was registered incorrectly. Should only be present on an dedicated server but was ran on an integrated server!"));
-
-	private boolean hasTested = false;
-	private boolean hasRegistered = false;
-
-	@Override
-	public void onInitialize() {
-		CommandRegistrationCallback.EVENT.register((dispatcher, dedicated) -> {
-			if (this.hasRegistered) {
-				throw new AssertionError("Commands should not be registered twice per server instance!");
-			}
-
-			this.hasRegistered = true;
-
-			// A command that exists on both types of servers
-			dispatcher.register(literal("fabric_common_test_command").executes(this::executeCommonCommand));
-
-			if (dedicated) {
-				// The command here should only be present on a dedicated server
-				dispatcher.register(literal("fabric_dedicated_test_command").executes(this::executeDedicatedCommand));
-			} else {
-				// The command here should only be present on a integrated server
-				dispatcher.register(literal("fabric_integrated_test_command").executes(this::executeIntegratedCommand));
-			}
-		});
-
-		// Use the ServerTickCallback to verify the commands actually exist in the command dispatcher.
-		ServerTickCallback.EVENT.register(server -> {
-			// Don't run the test more than once
-			if (this.hasTested) {
-				return;
-			}
-
-			final boolean dedicated = server.isDedicated();
-			final RootCommandNode<ServerCommandSource> rootNode = server.getCommandManager().getDispatcher().getRoot();
-
-			// Now we climb the tree
-			final CommandNode<ServerCommandSource> fabric_common_test_command = rootNode.getChild("fabric_common_test_command");
-			final CommandNode<ServerCommandSource> fabric_dedicated_test_command = rootNode.getChild("fabric_dedicated_test_command");
-			final CommandNode<ServerCommandSource> fabric_integrated_test_command = rootNode.getChild("fabric_integrated_test_command");
-
-			// Verify the common command exists
-			if (fabric_common_test_command == null) {
-				throw new AssertionError("Expected to find 'fabric_common_test_command' on the server's command dispatcher. But it was not found.");
-			}
-
-			if (dedicated) {
-				// Verify we don't have the integrated command
-				if (fabric_integrated_test_command != null) {
-					throw new AssertionError("Found 'fabric_integrated_test_command' on the dedicated server's command dispatcher. This should not happen!");
-				}
-
-				// Verify we have the dedicated command
-				if (fabric_dedicated_test_command == null) {
-					throw new AssertionError("Expected to find 'fabric_dedicated_test_command' on the dedicated server's command dispatcher. But it was not found.");
-				}
-			} else {
-				// Verify we don't have the dedicated command
-				if (fabric_dedicated_test_command != null) {
-					throw new AssertionError("Found 'fabric_dedicated_test_command' on the integrated server's command dispatcher. This should not happen!");
-				}
-
-				// Verify we have the integrated command
-				if (fabric_integrated_test_command == null) {
-					throw new AssertionError("Expected to find 'fabric_integrated_test_command' on the integrated server's command dispatcher. But it was not found.");
-				}
-			}
-
-			// Success!
-			this.hasTested = true;
-			CommandTest.LOGGER.info("The command tests have passed! Please make sure you execute the three commands for extra safety.");
-		});
-
-		ServerStopCallback.EVENT.register(server -> {
-			// When the server shuts down, we reset the registered flag.
-			this.hasRegistered = false;
-		});
-	}
-
-	private int executeCommonCommand(CommandContext<ServerCommandSource> context) {
-		final ServerCommandSource source = context.getSource();
-		source.sendFeedback(new LiteralText("Common test command is working."), false);
-		source.sendFeedback(new LiteralText("Server Is Dedicated: " + source.getMinecraftServer().isDedicated()), false);
-
-		return 1;
-	}
-
-	private int executeDedicatedCommand(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
-		final ServerCommandSource source = context.getSource();
-
-		if (!source.getMinecraftServer().isDedicated()) {
-			throw WRONG_SIDE_SHOULD_BE_DEDICATED.create();
-		}
-
-		source.sendFeedback(new LiteralText("Dedicated test command is working."), false);
-		source.sendFeedback(new LiteralText("Server Is Dedicated: " + source.getMinecraftServer().isDedicated()), false);
-
-		return 1;
-	}
-
-	private int executeIntegratedCommand(CommandContext<ServerCommandSource> context) throws CommandSyntaxException {
-		final ServerCommandSource source = context.getSource();
-
-		if (source.getMinecraftServer().isDedicated()) {
-			throw WRONG_SIDE_SHOULD_BE_INTEGRATED.create();
-		}
-
-		source.sendFeedback(new LiteralText("Integrated test command is working."), false);
-		source.sendFeedback(new LiteralText("Server Is Integrated: " + !source.getMinecraftServer().isDedicated()), false);
-
-		return 1;
-	}
-}
diff --git a/fabric-command-api-v1/src/testmod/resources/fabric.mod.json b/fabric-command-api-v1/src/testmod/resources/fabric.mod.json
deleted file mode 100644
index e1e68ba..0000000
--- a/fabric-command-api-v1/src/testmod/resources/fabric.mod.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "schemaVersion": 1,
-  "id": "fabric-command-api-v1-testmod",
-  "name": "Fabric Command API (v1) Test Mod",
-  "version": "1.0.0",
-  "environment": "*",
-  "license": "Apache-2.0",
-  "depends": {
-    "fabric-command-api-v1": "*"
-  },
-  "entrypoints": {
-    "main": [
-      "net.fabricmc.fabric.test.command.CommandTest"
-    ]
-  }
-}
-- 
2.26.2

